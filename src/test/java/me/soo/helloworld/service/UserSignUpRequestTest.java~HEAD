package me.soo.helloworld.service;

<<<<<<< HEAD:src/test/java/me/soo/helloworld/service/UserSignUpRequestTest.java
import com.sun.jdi.request.DuplicateRequestException;
import me.soo.helloworld.model.user.User;
import me.soo.helloworld.model.user.UserLoginInfo;
=======
import me.soo.helloworld.model.User;
import me.soo.helloworld.repository.UserRepository;
>>>>>>> feature/2:src/test/java/me/soo/helloworld/service/UserServiceImplTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
<<<<<<< HEAD:src/test/java/me/soo/helloworld/service/UserSignUpRequestTest.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
=======
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
>>>>>>> feature/2:src/test/java/me/soo/helloworld/service/UserServiceImplTest.java
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import javax.servlet.http.HttpSession;
import java.sql.Date;

import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.*;
import static org.mockito.Mockito.*;

<<<<<<< HEAD:src/test/java/me/soo/helloworld/service/UserSignUpRequestTest.java
@ExtendWith(SpringExtension.class)
@SpringBootTest
class UserSignUpRequestTest {
=======
@ExtendWith(MockitoExtension.class)
class UserServiceImplTest {
    @Mock
>>>>>>> feature/2:src/test/java/me/soo/helloworld/service/UserServiceImplTest.java
    User testUser;

    @InjectMocks
    UserServiceImpl userService;

    @Mock
    UserRepository userRepository;

    @Mock
    BCryptPasswordEncoder passwordEncoder;

    @Autowired
    HttpSession httpSession;

    @BeforeEach
    public void createUsers() {
        testUser = new User(
                "Soo",
                "Bakery",
                "test@test.com",
                "Male",
                Date.valueOf("1993-09-25"),
                "South Korea",
                "The United Kingdom",
                "Newcastle Upon Tyne",
                ""
        );

        passwordEncoder = new BCryptPasswordEncoder();
    }

    @Test
    public void insertUserServiceTest() {
<<<<<<< HEAD:src/test/java/me/soo/helloworld/service/UserSignUpRequestTest.java
        userService.insertUser(testUser);
=======
        userService.userSignUp(testUser);
    }

    @Test
    @DisplayName("조회한 아이디가 DB에 존재하지 않는 경우 false를 리턴합니다.")
    public void duplicateUserIdExceptionFalse() {
        when(userRepository.isUserIdDuplicate(testUser.getUserId())).thenReturn(false);
        assertThat(userService.isUserIdDuplicate(testUser.getUserId()), is(false));

        userRepository.isUserIdDuplicate(testUser.getUserId());
>>>>>>> feature/2:src/test/java/me/soo/helloworld/service/UserServiceImplTest.java
    }


    // create a failed case
    @Test
<<<<<<< HEAD:src/test/java/me/soo/helloworld/service/UserSignUpRequestTest.java
    public void duplicateUserIdException() {
        userService.isUserIdDuplicate(testUser.getUserId());
=======
    @DisplayName("조회한 아이디가 DB에 존재하는 경우 true를 리턴합니다.")
    public void duplicateUserIdExceptionTrue() {
        when(userRepository.isUserIdDuplicate(testUser.getUserId())).thenReturn(true);
        assertThat(userService.isUserIdDuplicate(testUser.getUserId()), is(true));

        userRepository.isUserIdDuplicate(testUser.getUserId());
>>>>>>> feature/2:src/test/java/me/soo/helloworld/service/UserServiceImplTest.java
    }
    }